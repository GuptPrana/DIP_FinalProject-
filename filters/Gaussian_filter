from itertools import product
from cv2 import COLOR_BGR2GRAY, cvtColor, imread, imshow, waitKey
import cv2
from numpy import dot, exp, mgrid, pi, ravel, square, uint8, zeros
import numpy as np
from scipy.signal import gaussian, convolve2d
import random
from ast import If
from skimage.util import random_noise
import matplotlib.pyplot as plt

def apply_sandp(image, amount=0.1): # from Thanats part
    return random_noise(image, mode='s&p', amount=amount)*255

def guassian_blur(image,kernal ,sigma): # from Thanats part
    while True:
        try:
            img = cv2.GaussianBlur(image,(kernal,kernal),sigma,cv2.BORDER_DEFAULT)
            break
        except:
            kernal += 1
    return img

def gen_gaussian_kernel(k_size, sigma):
    center = k_size // 2
    x, y = mgrid[0 - center : k_size - center, 0 - center : k_size - center]
    g = 1 / (2 * pi * sigma) * exp(-(square(x) + square(y)) / (2 * square(sigma))) # gaussian distribution
    return g


def gaussian_filter(image, k_size, sigma):
  
    height, width = image.shape[0], image.shape[1]

    # dst image height and width
    dst_height = height - k_size + 1
    dst_width = width - k_size + 1

    # im2col, turn the k_size*k_size pixels into a row and np.vstack all rows
    image_array = zeros((dst_height * dst_width, k_size * k_size))
    row = 0
    for i, j in product(range(dst_height), range(dst_width)):
        window = ravel(image[i : i + k_size, j : j + k_size])
        image_array[row, :] = window
        row += 1

    #  turn the kernel into shape(k*k, 1)
    gaussian_kernel = gen_gaussian_kernel(k_size, sigma)
    filter_array = ravel(gaussian_kernel)

    # reshape and get the dst image
    dst = dot(image_array, filter_array).reshape(dst_height, dst_width).astype(uint8)

    return dst

def guassian_noise(image, sigma):
	gauss = np.random.normal(0, sigma, np.shape(image))
	noisy_img = image + gauss
	noisy_img[noisy_img < 0] = 0
	noisy_img[noisy_img > 255] = 255
	return noisy_img    


if __name__ == "__main__":
    # read original image # turn image in gray scale value
    img = imread("D85.jpeg")
    gray = cvtColor(img, COLOR_BGR2GRAY)

    # Add Gaussian noise
    gnoise_img = guassian_noise(gray,5)
    gnoise_img1 = guassian_noise(gray,10)
    gnoise_img2 = guassian_noise(gray,20)

    # Add salt and pepper noise
    snp_img = apply_sandp(gray, amount=0.05)
    snp_img1 = apply_sandp(gray, amount=0.1)
    snp_img2 = apply_sandp(gray, amount=0.2)

    #Apply Gaussian filter for gnoiseimg
    filtered_gimg1 = gaussian_filter(gnoise_img, 3, sigma=0.8)
    filtered_gimg2 = gaussian_filter(gnoise_img, 3, sigma=0.9)
    filtered_gimg3 = gaussian_filter(gnoise_img, 3, sigma=1)
    filtered_gimg4 = gaussian_filter(gnoise_img, 5, sigma=0.8)
    filtered_gimg5 = gaussian_filter(gnoise_img, 5, sigma=0.9)
    filtered_gimg6 = gaussian_filter(gnoise_img, 5, sigma=1)
    filtered_gimg7 = gaussian_filter(gnoise_img, 7, sigma=0.8)
    filtered_gimg8 = gaussian_filter(gnoise_img, 7, sigma=0.9)
    filtered_gimg9 = gaussian_filter(gnoise_img, 7, sigma=1)

# filter image gnoise2
    filtered_gimg1a = gaussian_filter(gnoise_img1, 3, sigma=0.8)
    filtered_gimg1b = gaussian_filter(gnoise_img1, 3, sigma=0.9)
    filtered_gimg1c= gaussian_filter(gnoise_img1, 3, sigma=1)
    filtered_gimg1d = gaussian_filter(gnoise_img1, 5, sigma=0.8)
    filtered_gimg1e = gaussian_filter(gnoise_img1, 5, sigma=0.9)
    filtered_gimg1f = gaussian_filter(gnoise_img1, 5, sigma=1)
    filtered_gimg1g = gaussian_filter(gnoise_img1, 7, sigma=0.8)
    filtered_gimg1h = gaussian_filter(gnoise_img1, 7, sigma=0.9)
    filtered_gimg1i = gaussian_filter(gnoise_img1, 7, sigma=1)

    # filter image gnoise2
    filtered_gimg2a = gaussian_filter(gnoise_img2, 3, sigma=0.8)
    filtered_gimg2b = gaussian_filter(gnoise_img2, 3, sigma=0.9)
    filtered_gimg2c = gaussian_filter(gnoise_img2, 3, sigma=1)
    filtered_gimg2d = gaussian_filter(gnoise_img2, 5, sigma=0.8)
    filtered_gimg2e = gaussian_filter(gnoise_img2, 5, sigma=0.9)
    filtered_gimg2f = gaussian_filter(gnoise_img2, 5, sigma=1)
    filtered_gimg2g = gaussian_filter(gnoise_img2, 7, sigma=0.8)
    filtered_gimg2h = gaussian_filter(gnoise_img2, 7, sigma=0.9)
    filtered_gimg2i = gaussian_filter(gnoise_img2, 7, sigma=1)

    # filter image gnoise2
    
    filtered_snpimg1 = gaussian_filter(snp_img1, 3, sigma=0.8)
    filtered_snpimg2 = gaussian_filter(snp_img1, 3, sigma=0.9)
    filtered_snpimg3 = gaussian_filter(snp_img1, 3, sigma=1)
    filtered_snpimg4 = gaussian_filter(snp_img1, 5, sigma=0.8)
    filtered_snpimg5 = gaussian_filter(snp_img1, 5, sigma=0.9)
    filtered_snpimg6 = gaussian_filter(snp_img1, 5, sigma=1)
    filtered_snpimg7 = gaussian_filter(snp_img1, 7, sigma=0.8)
    filtered_snpimg8 = gaussian_filter(snp_img1, 7, sigma=0.9)
    filtered_snpimg9 = gaussian_filter(snp_img1, 7, sigma=1)    


 # Display results
    fig = plt.figure(figsize = (120, 100))
    display = [gnoise_img,  filtered_gimg1, filtered_gimg2, filtered_gimg3, filtered_gimg4,filtered_gimg5,filtered_gimg6,filtered_gimg7,filtered_gimg8,filtered_gimg9,
               gnoise_img1, filtered_gimg1a, filtered_gimg1b, filtered_gimg1c, filtered_gimg1d, filtered_gimg1e, filtered_gimg1f, filtered_gimg1g, filtered_gimg1h, filtered_gimg1i,
               gnoise_img2, filtered_gimg2a, filtered_gimg2b, filtered_gimg2c, filtered_gimg2d, filtered_gimg2e, filtered_gimg2f, filtered_gimg2g, filtered_gimg2h, filtered_gimg2i,
               snp_img,  filtered_snpimg1, filtered_snpimg2, filtered_snpimg3, filtered_snpimg4, filtered_snpimg5, filtered_snpimg6, filtered_snpimg7, filtered_snpimg8, filtered_snpimg9] 

               
    title = ['Gaussiannoise Image',  '3 SD = 0.8', '3 SD = 0.9', '3 SD = 1','5 SD = 0.8', '5 SD = 0.9', '7 SD = 1''7 SD = 0.8', '7 SD = 0.9', '7 SD = 1',
             'Gaussiannoise Image1',  '3 SD = 0.8', '3 SD = 0.9', '3 SD = 1','5 SD = 0.8', '5 SD = 0.9', '7 SD = 1''7 SD = 0.8', '7 SD = 0.9', '7 SD = 1',
             'Gaussiannoise Image2',  '3 SD = 0.8', '3 SD = 0.9', '3 SD = 1','5 SD = 0.8', '5 SD = 0.9', '7 SD = 1''7 SD = 0.8', '7 SD = 0.9', '7 SD = 1',
             'SNP noise Image',  '3 SD = 0.8', '3 SD = 0.9', '3 SD = 1','5 SD = 0.8', '5 SD = 0.9', '7 SD = 1''7 SD = 0.8', '7 SD = 0.9', '7 SD = 1']

    for i in range(len(display)):
        fig.add_subplot(10, 4, i+1)
        plt.imshow(display[i], cmap = 'gray')
        plt.title(title[i])
    
    plt.show()
