#import os
import numpy as np
from numpy.fft import fft2, ifft2
from scipy.signal import gaussian, convolve2d
import matplotlib.pyplot as plt
import cv2


def wiener_filter(img, kernel, K):
	kernel /= np.sum(kernel)
	temp = np.copy(img)
	temp = fft2(temp)
	kernel = fft2(kernel, s = img.shape)
	kernel = np.conj(kernel) / (np.abs(kernel) ** 2 + K)
	temp = temp * kernel
	temp = np.abs(ifft2(temp))
	return temp

def gaussian_kernel(kernel_size = 3):
	h = gaussian(kernel_size, kernel_size / 3).reshape(kernel_size, 1)
	h = np.dot(h, h.transpose())
	h /= np.sum(h)
	return h


if __name__ == '__main__':
	# Load image and convert it to gray scale
	file_name = cv2.imread('D85_5833.jpg') 
	gray = cv2.cvtColor(file_name, cv2.COLOR_BGR2GRAY)

	# Apply Wiener Filter
	kernel = gaussian_kernel(5)
	filtered_img = wiener_filter(gray, kernel, K = 20)

	# Display results
	display = [gray , filtered_img]
	label = ['Original Image','Wiener Filter applied']

	fig = plt.figure(figsize=(120, 100))

	for i in range(len(display)):
		fig.add_subplot(2, 2, i+1)
		plt.imshow(display[i], cmap = 'gray')
		plt.title(label[i])

	plt.show()
